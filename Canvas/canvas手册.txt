1、css控制canvas元素宽高有可能不准确、扭曲等现象，而在元素width、height属性中设置宽高可避免异常；


2、支持canvas的浏览器会忽略canvas标签中的内容，而不支持canvas的浏览器会展现canvas标签中的内容，那么有一个好主意，我们可以在canvas标签中放入一个img元素，当canvas标签不被浏览器接受时显示其静态图片，使内容不突兀、适应性号；


3、canvas元素自带的.getContext()方法不仅是用来设定canvas元素上下文渲染模式，同时还可以在js中判断浏览器是否支持canvas，通过使用!!<canvasElement>.getContext检测；

4、绘制矩形：	.fillRect(px,py,w,h)	--填充矩形区域
		.strokeRect(px,py,w,h)	--绘制矩形边框
		.clearRect(px,py,w,h)	--去除矩形区域，背景为透明

5、绘制路径：	.beginPath()		--开启新的路径列表，清空原有的路径列表。在调用beginPath()或canvas刚建的时候，第一条路径构造命令通常被视为moveTo()，所以干脆养成在这句之后使用.moveTo(px,py)设置路径起始点
		.closePath()		--创建一条从当前点到起始点的路径，闭合路径之后，又重新回到上下文中
		.stroke()		--用线描绘路径列表，但是不会自动闭合路径
		.fill()			--自动闭合路径列表中的路径，然后填充闭合图形

		.moveTo(px,py)		--移动笔触，到指定的坐标
		.lineTo(px,py)		--线，绘制一条从当前点到指定坐标的路径
		.arc(px,py,radius,startAngle,endAngle,antclockwise)
					--圆弧(或圆)，绘制一条以px,py为圆心，radius为半径，按照anticlockwise给定的方向(默认false,即顺时针)的从startAngle开始到endAngle结束的圆弧(或圆)
		.arcTo(x1,y1,x2,y2,radius)
					--根据给定的控制点和半径画一段圆弧，圆弧为P1P0射线和P0P2射线的切线

		.quadraticCurveTo(x1,y1,x2,y2)
					--二次贝塞尔曲线，P2为结束点，P1为控制点，曲线的凸出在P1那面
		.bezierCurveTo(x1,y1,x2,y2,x3,y3)
					--三次贝塞尔曲线，P1为控制点1，P2为控制点2，P3为结束点

		.rect(x,y,width,height)	--绘制一个左上角坐标为(x,y)，宽高为width和height的矩形，但是注意，执行该方法会使当前笔触自动重置会默认坐标到(0,0)

6、Path2D对象：	new Path2D()		--会返回一个空的Path对象
		new Path2D(path)	--克隆Path对象
		new Path2D(d)		--从SVG建立Path对象

7、色彩：	.fillStyle		--设置图形的填充颜色
		.strokeStyle		--设置图形的轮廓颜色

		.globalAlpha		--设置透明度，注意透明叠加情形

8、线型：	.lineWidth		--设置线条宽度，数值，不能带单位
		.lineCap		--设置线条末端样式
						----butt	线段末端以方形结束
						----round	线段末端以圆形结束，但是增加了一个宽度和线段相同，高度是线段厚度一半的矩形区域
						----square	线段末端以方形结束，但是增加了一个宽度和线段相同，高度是线段厚度一半的矩形区域
		.lineJoin		--设置线条与线条间接合处的样式
						----miter	默认值，填充一个额外的菱形区域
						----round	把原先菱形区域的外侧尖角磨圆了的样式
						----bevel	把原先菱形区域的尖角切去的样式
		.miterLimit		--限制当两条线相交时交接处最大长度，所谓交接处长度是指线条交接处内角顶点到外角顶点的长度
		.setLineDash(<arr>)	--设置当前虚线样式，其中arr为数组，其中奇项为实线长，偶项为虚线长，整个为虚线的虚实循环规律
		.getLineDash()		--返回一个包含当前虚线样式，长度为非负偶数的数组
		.lineDashOffset		--设置虚线样式的起始偏移量，相当于把虚线往左水平拉扯了一段距离，数值，不能带单位

	额外注意：
		1）lineWidth，注意半渲染的情况，如此时线宽设为1px，我们要画一条(3,1)到(3,5)的直线，此时线段的中心点确实是沿着这条直线的，可线的左右两边都只占了0.5px，此时会发生半渲染现象，将(2,y)到(2.5,y)这种格子填充实际笔触一半的颜色，所以为了避免，此时会设计将直线的横坐标设为2.5或3.5来规避，注意这种现象可以确保图形在经过缩放等变换后保持看上去蛮好、清晰；
		2）lineCap，默认的butt是与设计终点相同，round和square比设计终点要多出一个宽度为lineWidth值，高度为lineWidth值一半的区域。

9、渐变：	.createLinearGradient(x1,y1,x2,y2)
					--线性渐变，方向从P1到P2
		.createRadialGradient(x1,y1,radius1,x2,y2,radius2)
					--圆型渐变，方向从第一个圆向第二个圆
		<gradientObj>.addColorStop(position,color)
					--给渐变添加色标，第一参数position是一个0.0与1.0之间的数值，表示渐变中颜色所在的相对位置

	额外注意：
		渐变的设定是先用变量存储下来，然后赋值给色彩样式来使用的。

10、图案样式：
		.createPattern(image,type)
					--设置图案样式，其中image参数可以是img对象的引用或者另一个canvas对象；type只能是repeat|repeat-x|repeat-y|no-repeat
	额外注意：
		1）与drawImage有点不同，使用该方法需要确认其参数中image对象已经装载完毕，否则图案可能会效果不对，所以使用时可以配合img对象的onload事件来确保图片加载完毕；
		2）其使用与渐变一样，先存储在变量中，再赋值给色彩样式来使用。

11、阴影：
		.shadowOffsetX		--设定阴影在X轴的延伸距离
		.shadowOffsetY		--设定阴影在Y轴的延伸距离
		.shadowBlur		--设定阴影的模糊程度，其数值并不跟像素数量挂钩，也不受变换矩阵的影响，默认值为0
		.shadowColor		--设定阴影的颜色，默认是全透明的黑色

12、填充规则：		
		.fill(【"nonzero"|"evenodd"】)			
					--自动闭合路径列表中的路径，然后填充闭合图形，其默认填充规则是"nonzero"
	补充说明：
		1）"nonzero"指"非零环绕数规则"：
			即在平面内的任何一点P，引出一条射线，注意不要经过多边形的顶点，然后将多边形的边矢量化，规定当射线从多边形的边穿过，经过顺时针绘制的边线加1，则经过逆时针绘制的边线减1，最终结果累加，如果为0，则点P在多边的外面；如果非0则点P在多边形的内部。 
		2）"evenodd"指")奇-偶规则"：
			即在平面内的任何一点P，引出一条射线，注意不要经过多边形的顶点，若与该射线相交的多边形边的数目为奇数，则p是多边形内部点，否则是外部点。
	额外注意：
		同一闭合图形分别在运用"非零环绕数规则"和"奇-偶规则"时，可能得到的结果不同。

13、绘制文本：
		.fillText(text,x,y【,maxWidth】)
					--设置填充文本，将text设置到指定的位置，并可以设置maxWidth来控制文本最大长度
		.strokeText(text,x,y【,maxWidth】)
					--设置填充文本框，将text以文本框的形式设置到指定的位置，可以设置maxWidth来控制最大长度

		.font			--设置文本样式，其值与css font属性设置一致，包括书写顺序和必要设置，为字符串，中间用空格间隔
						----【font-style】	文字斜体设置
							------normal
							------italic		按文字的斜体样式
							------oblique		按文字倾斜的样子
						----【font-variant】	文字小写字母变体设置
							------normal
							------small-caps	文字的小写字母转换成大写字母，但其转换后的大小仍小于原本就是大写的那些字母
						----【font-weight】	文字的粗细设置
						----font-size		文字的大小
						----【line-height】	行高
						----font-family		文字的种类

		.textAlign		--设置文本对齐规则，其值可设为start/end/left/right/center，默认为left

		.textBaseline		--设置文本基线
						----top		  文本基线是em方框的顶端
						----hanging	  文本基线是悬挂基线
						----middle	  文本基线是em方框的正中
						----alphabetic    默认，文本基线是普通的字母基线
						----ideographic   文本基线是表意基线
						----bottom        文本基线是em方框的底端

		.direction		--设置文本方向，其值可设为ltr/rtl/inhert

		.measureText(text)	--返回一个text设定的TextMetrics对象
							
14、使用图像：
		1）引入图像到canvas里需要两步基本操作，
			1> 获得一个图片的源
			2> 使用drawImage()函数将图片绘制到画布上

		2）canvas的API可以使用的图片源有，
			1> HTMLImageElement	这些图片是由Image()函数构造出来的，或者任何<img>元素，可以通过 document.images集合 或 document.getElementsByTagName()方法 或 document.getElementById()来获取所需的 image 元素
			2> HTMLVideoElement	用一个HMTL的<video>元素作为图片源，可以从视频中抓取当前帧作为一个图像，即使视频被设为不可见
			3> HTMLCanvasElement	使用另一个<canvas>元素作为图片源，可以通过用 document.getElementsByTagName 或 document.getElementById 方法来获取其它 canvas 元素
			4> ImageBitmap		一种高性能的位图

		3）注意，若调用drawImage时，图片没有装载完，那什么都不会发生，在一些旧的浏览器中可能会抛出异常，因此，应该用load事件来保证不会在加载完毕之前使用这个图片。

		4）简单使用	
			.drawImage(image,x,y)    --将指定图片放置到指定位置

		5）缩放使用	
			.drawImage(image,x,y,width,height)    --将指定图片缩放为相应大小后放置到指定位置

		6）切片使用
			.drawIamge(image,sx,sy,swidth,sheight,dx,dy,dWidth,dHeight)    --将指定图片先切片，后放置，前4个是定义图像源的切片位置和大小，后4个则是定义切片的目标显示位置和大小
							